{"name":"Swig","tagline":"Mirror of svn://svn.code.sf.net/p/swig/code","body":"SWIG (Simplified Wrapper and Interface Generator)\r\n\r\nVersion: 2.0.9 (16 December 2012)\r\n\r\nTagline: SWIG is a compiler that integrates C and C++ with languages\r\n         including Perl, Python, Tcl, Ruby, PHP, Java, Ocaml, Lua,\r\n         Scheme (Guile, MzScheme, CHICKEN), Pike, C#, Modula-3,\r\n         Common Lisp (CLISP, Allegro CL, CFFI, UFFI), Octave and R.\r\n\r\nSWIG reads annotated C/C++ header files and creates wrapper code (glue\r\ncode) in order to make the corresponding C/C++ libraries available to\r\nthe listed languages, or to extend C/C++ programs with a scripting\r\nlanguage.\r\n\r\nUp-to-date SWIG related information can be found at\r\n\r\n        http://www.swig.org\r\n\r\nA SWIG FAQ and other hints can be found on the SWIG Wiki:\r\n\r\n        http://www.dabeaz.com/cgi-bin/wiki.pl\r\n\r\nLicense\r\n=======\r\nPlease see the LICENSE file for details of the SWIG license.\r\n\r\nRelease Notes\r\n=============\r\nPlease see the CHANGES.current file for a detailed list of bug fixes and\r\nnew features for the current release. The CHANGES file contains bug fixes\r\nand new features for older versions. A summary of changes in each release\r\ncan be found in the RELEASENOTES file.\r\n\r\nBackwards Compatibility\r\n=======================\r\nThe developers strive their best to preserve backwards compatibility\r\nbetween releases, but this is not always possible as the overriding\r\naim is to provide the best wrapping experience. Where backwards\r\ncompatibility is known to be broken, it is clearly marked as an\r\nincompatibility in the CHANGES and CHANGES.current files.\r\n\r\nSee the documentation for details of the SWIG_VERSION preprocessor\r\nsymbol if you have backward compatibility issues and need to use more\r\nthan one version of SWIG.\r\n\r\nWindows Installation\r\n====================\r\nPlease see the Doc/Manual/Windows.html file for instructions on installing\r\nSWIG on Windows and running the examples. The Windows distribution is\r\ncalled swigwin and includes a prebuilt SWIG executable, swig.exe, included in\r\nthe same directory as this README file. Otherwise it is exactly the same as\r\nthe main SWIG distribution. There is no need to download anything else.\r\n\r\nUnix Installation\r\n=================\r\nYou must use GNU `make' to build SWIG.\r\n\r\nhttp://www.gnu.org/software/make/\r\n\r\nPCRE needs to be installed on your system to build SWIG, in particular\r\npcre-config must be available. If you have PCRE headers and libraries but not\r\npcre-config itself or, alternatively, wish to override the compiler or linker\r\nflags returned by pcre-config, you may set PCRE_LIBS and PCRE_CFLAGS variables\r\nto be used instead. And if you don't have PCRE at all, the configure script\r\nwill provide instructions for obtaining it.\r\n\r\nTo build and install SWIG, simply type the following:\r\n\r\n     % ./configure\r\n     % make\r\n     % make install\r\n\r\nBy default SWIG installs itself in /usr/local.  If you need to install SWIG in\r\na different location or in your home directory, use the --prefix option\r\nto ./configure.  For example:\r\n\r\n     % ./configure --prefix=/home/yourname/projects\r\n     % make\r\n     % make install\r\n\r\nNote: the directory given to --prefix must be an absolute pathname.  Do *NOT* use\r\nthe ~ shell-escape to refer to your home directory.  SWIG won't work properly\r\nif you do this.\r\n\r\nThe file INSTALL details more about using configure. Also try\r\n\r\n     % ./configure --help.\r\n\r\nThe configure script will attempt to locate various packages on your machine\r\nincluding Tcl, Perl5, Python and all the other target languages that SWIG\r\nuses.  Don't panic if you get 'not found' messages--SWIG does not need these\r\npackages to compile or run.   The configure script is actually looking for\r\nthese packages so that you can try out the SWIG examples contained\r\nin the 'Examples' directory without having to hack Makefiles.\r\nNote that the --without-xxx options, where xxx is a target language, have \r\nminimal effect. All they do is reduce the amount of testing done with \r\n'make check'. The SWIG executable and library files installed cannot currently\r\nbe configured with a subset of target languages.\r\n\r\nPlease see the Documentation section below on installing documentation as\r\nnone is installed by default.\r\n\r\nSWIG used to include a set of runtime libraries for some languages for working\r\nwith multiple modules. These are no longer built during the installation stage.\r\nHowever, users can build them just like any wrapper module as described in\r\nthe documentation, Doc/Manual/Modules.html. The CHANGES file also lists some\r\nexamples which build the runtime library.\r\n\r\nNotes:\r\n\r\n(1) If you checked the code out via SVN, you will have to run ./autogen.sh\r\n    before typing 'configure'.  In addition, a full build of SWIG requires\r\n    the a number of packages to be installed.  Full instructions at\r\n    http://www.swig.org/svn.html\r\n\r\nMacintosh OS X Installation\r\n============================\r\nSWIG is known to work on various flavors of OS X.  Follow the Unix installation\r\ninstructions above.   However, as of this writing, there is still great deal of\r\ninconsistency with how shared libaries are handled by various scripting languages\r\non OS X.   We've tried to resolve these differences to the extent of our knowledge.\r\n\r\nUsers of OS X should be aware that Darwin handles shared libraries and linking in \r\na radically different way than most Unix systems.  In order to test SWIG and run\r\nthe examples, SWIG configures itself to use flat namespaces and to allow undefined \r\nsymbols (-flat_namespace -undefined suppress). This mostly closely follows the Unix \r\nmodel and makes it more likely that the SWIG examples will work with whatever \r\ninstallation of software you might have.  However, this is generally not the recommended\r\ntechnique for building larger extension modules.  Instead, you should utilize\r\nDarwin's two-level namespaces.  Some details about this can be found here\r\n\r\nhttp://developer.apple.com/documentation/ReleaseNotes/DeveloperTools/TwoLevelNamespaces.html\r\n\r\nNeedless to say, you might have to experiment a bit to get things working at first.\r\n\r\nTesting\r\n=======\r\nIf you want to test SWIG before installation, type the following:\r\n\r\n    % make -k check\r\n\r\n'make -k check' requires at least one of the target languages to be\r\ninstalled.  If it fails, it may mean that you have an uninstalled\r\nlanguage module or that the file 'Examples/Makefile' has been\r\nincorrectly configured.  It may also fail due to compiler issues such\r\nas broken C++ compiler.  Even if 'make -k check' fails, there is a\r\npretty good chance SWIG still works correctly---you will just have to\r\nmess around with one of the examples and some makefiles to get it to work.\r\nSome tests may also fail due to missing dependency packages, eg PCRE\r\nor Boost, but this will require careful analysis of the configure output.\r\n\r\nThe testing suite executed by 'make -k check' is designed to stress-test\r\nmany parts of the implementation including obscure corner cases. If some\r\nof these tests fail or generate warning messages, there is no reason for\r\nalarm---the test may be related to some new SWIG feature or a difficult bug\r\nthat we're trying to resolve.  Chances are that SWIG will work just fine\r\nfor you. Note that if you have more than one CPU/core, then you can use\r\nparallel make to speed up the check as it does take quite some time to run,\r\nfor example:\r\n\r\n    % make -j2 -k check\r\n\r\nAlso, SWIG's support for C++ is sufficiently advanced that certain\r\ntests may fail on older C++ compilers (for instance if your compiler\r\ndoes not support member templates).   These errors are harmless if you\r\ndon't intend to use these features in your own programs.\r\n\r\nNote: The test-suite currently contains over 500 tests.  If you\r\nhave many different target languages installed and a slow machine, it\r\nmight take more than an hour to run the test-suite.\r\n\r\nExamples\r\n========\r\nThe Examples directory contains a variety of examples of using SWIG\r\nand it has some browsable documentation.  Simply point your browser to\r\nthe file \"Example/index.html\".\r\n\r\nThe Examples directory also includes Visual C++ project (.dsp) files for\r\nbuilding some of the examples on Windows.\r\n\r\nKnown Issues\r\n============\r\nThere are minor known bugs, details of which are in the bug tracker, see\r\nhttp://www.swig.org/bugs.html.\r\n\r\nTroubleshooting\r\n===============\r\nIn order to operate correctly, SWIG relies upon a set of library\r\nfiles.  If after building SWIG, you get error messages like this,\r\n\r\n    % swig foo.i\r\n    :1. Unable to find 'swig.swg'\r\n    :3. Unable to find 'tcl8.swg'\r\n\r\nit means that SWIG has either been incorrectly configured or\r\ninstalled.  To fix this:\r\n\r\n    1.  Make sure you remembered to do a 'make install' and that\r\n        the installation actually worked.  Make sure you have\r\n        write permission on the install directory.\r\n\r\n    2.  If that doesn't work, type 'swig -swiglib' to find out\r\n        where SWIG thinks its library is located.\r\n\r\n    3.  If the location is not where you expect, perhaps\r\n        you supplied a bad option to configure.  Use\r\n        ./configure --prefix=pathname to set the SWIG install\r\n        location.   Also, make sure you don't include a shell\r\n        escape character such as ~ when you specify the path.\r\n\r\n    4.  The SWIG library can be changed by setting the SWIG_LIB\r\n        environment variable.  However, you really shouldn't\r\n        have to do this.\r\n\r\nIf you are having other troubles, you might look at the SWIG Wiki at\r\nhttp://www.dabeaz.com/cgi-bin/wiki.pl.\r\n\r\nDocumentation\r\n=============\r\nThe Doc/Manual directory contains the most recent set of updated\r\ndocumentation for this release. The documentation is available in\r\nthree different formats, each of which contains identical content.\r\nThese format are, pdf (Doc/Manual/SWIGDocumentation.pdf), single\r\npage html (Doc/Manual/SWIGDocumentation.html) or multiple page html\r\n(other files in Doc/Manual). Please select your chosen format and\r\ncopy/install to wherever takes your fancy.\r\n\r\nThere is some technical developer documentation available in the\r\nDoc/Devel subdirectory.  This is not necessarily up-to-date, but it\r\nhas some information on SWIG internals.\r\n\r\nParticipate!\r\n============\r\nPlease report any errors and submit patches (if possible)!  We only\r\nhave access to a limited variety of hardware (Linux, Solaris, OS-X,\r\nand Windows). All contributions help.\r\n\r\nIf you would like to join the SWIG development team or contribute a\r\nlanguage module to the distribution, please contact the swig-devel\r\nmailing list, details at http://www.swig.org/mail.html.\r\n\r\n\r\n -- The SWIG Maintainers\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}